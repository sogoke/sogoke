require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe CategoriesController do

  # This should return the minimal set of attributes required to create a valid
  # Category. As you add validations to Category, be sure to
  # update the return value of this method accordingly.

  describe "GET index" do
    let(:categories) { [mock_model(Category)] }
    
    before do
      Category.stub!(:roots).and_return(categories)
    end
    
    it "should receive all" do
      Category.should_receive(:roots).and_return(categories)
      get :index
    end
    
    it "assigns all categories as @categories" do
      get :index
      assigns(:categories).should eq(categories)
    end
    
    it "should render index" do
      get :index
      response.should render_template(:index)
    end
  end

  describe "GET new" do
    it "assigns a new category as @category" do
      get :new
      assigns(:category).should be_a_new(Category)
    end
    
    it "renders new" do
      get :new
      response.should render_template(:new)
    end
  end

  describe "GET edit" do
    let(:category) { mock_model(Category, :id => 5) }
    
    before do
      Category.stub!(:find).and_return(category)
    end
    
    it "assigns the requested category as @category" do
      Category.should_receive(:find).with(5).and_return(category)
      get :edit, :id => 5
      
      assigns(:category).id.should eq(5)
      response.should render_template(:edit)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      let(:category) { mock_model(Category, save: true, name: "Wood") }
      
      before(:each) do
        Category.stub!(:new).and_return(category)
      end

      it "assigns a newly created category as @category" do
        Category.should_receive(:new).with("name" => "Wood", "parent_id" => "blablablabla").and_return(category)
        post :create, :category => { name: "Wood", parent_id: "blablablabla" }
      end
      
      it "@category should be right" do
        post :create, :category => { name: "Wood", parent_id: "blablablabla" }
        assigns(:category).name.should eq("Wood")
      end

      it "redirects to the created category" do
        post :create
        response.should redirect_to(categories_path)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved category as @category" do
        Category.any_instance.stub(:save).and_return(false)
        post :create, :category => {}
        assigns(:category).should be_a_new(Category)
      end

      it "re-renders the 'new' template" do
        Category.any_instance.stub(:save).and_return(false)
        post :create, :category => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested category" do
        category = Category.create! valid_attributes
        # Assuming there are no other categories in the database, this
        # specifies that the Category created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Category.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => category.id, :category => {'these' => 'params'}
      end

      it "assigns the requested category as @category" do
        category = Category.create! valid_attributes
        put :update, :id => category.id, :category => valid_attributes
        assigns(:category).should eq(category)
      end

      it "redirects to the category" do
        category = Category.create! valid_attributes
        put :update, :id => category.id, :category => valid_attributes
        response.should redirect_to(category)
      end
    end

    describe "with invalid params" do
      it "assigns the category as @category" do
        category = Category.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Category.any_instance.stub(:save).and_return(false)
        put :update, :id => category.id.to_s, :category => {}
        assigns(:category).should eq(category)
      end

      it "re-renders the 'edit' template" do
        category = Category.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Category.any_instance.stub(:save).and_return(false)
        put :update, :id => category.id.to_s, :category => {}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested category" do
      category = Category.create! valid_attributes
      expect {
        delete :destroy, :id => category.id.to_s
      }.to change(Category, :count).by(-1)
    end

    it "redirects to the categories list" do
      category = Category.create! valid_attributes
      delete :destroy, :id => category.id.to_s
      response.should redirect_to(categories_url)
    end
  end

end
